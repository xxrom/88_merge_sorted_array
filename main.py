class Solution:

  def merge(self, num1, m, num2, n):
    i1 = m - 1
    i2 = n - 1
    emp = len(num1) - 1

    size1 = len(num1)
    size2 = len(num2)

    while i1 >= 0 or i2 >= 0:
      # print(num1)
      # print(num2)
      # print(i1, i2, emp, num1[i1], num2[i2])
      # print('----------------')

      if i2 >= 0:
        if (i2 >= 0 and i1 < 0) or num1[i1] <= num2[i2]:
          # print('i2', num2[i2], ' / ', i1, i2)
          num1[emp] = num2[i2]
          num2[i2] = ''
          emp -= 1
          i2 -= 1
        elif i1 >= 0:
          # print('i1', num1[i1])
          num1[emp] = num1[i1]
          num1[i1] = ''

          i1 -= 1
          emp -= 1
      else:
        # reach the end of second list => exit
        i1 = -1


my = Solution()

num1 = [1, 2, 3, 0, 0, 0]
m = 3
num2 = [2, 5, 6]
n = 3
trueAns = [1, 2, 2, 3, 5, 6]

# num1 = [1, 2, 3]
# m = 3
# num2 = []
# n = 0
# trueAns = [1, 2, 3]

# num1 = [1, 2, 3, 0]
# m = 3
# num2 = [4]
# n = 1
# trueAns = [1, 2, 3, 4]

# num1 = [1, 2, 3, 0, 0]
# m = 3
# num2 = [1, 1]
# n = 2
# trueAns = [1, 1, 1, 2, 3]

# num1 = [1, 2, 3, 0, 0, 0]
# m = 3
# num2 = [1, 2, 3]
# n = 3
# trueAns = [1, 1, 2, 2, 3, 3]

# num1 = [1, 0]
# m = 1
# num2 = [1]
# n = 1
# trueAns = [1, 1]

# num1 = [0]
# m = 0
# num2 = [1]
# n = 1
# trueAns = [1]

# num1 = [1, 2, 3, 4, 5, 6, 0]
# m = 6
# num2 = [3]
# n = 1
# trueAns = [1, 2, 3, 3, 4, 5, 6]

# num1 = [0, 0, 3, 0, 0, 0, 0, 0, 0]
# m = 3
# num2 = [-1, 1, 1, 1, 2, 3]
# n = 6
# trueAns = [-1, 0, 0, 1, 1, 1, 2, 3, 3]

my.merge(num1, m, num2, n)
print("ans", num1, num1 == trueAns)
"""
                 e
num1 = [0, 0, 3, 0, 0, 0, 0, 0, 0]
        ^
num2 = [-1, 1, 1, 1, 2, 3]
        ^
--------------------------------
                  e
num1 = [-1, 0, 3, 0, 0, 0, 0, 0, 0]
               ^
num2 = [0, 1, 1, 1, 2, 3]
        ^
--------------------------------
                     e
num1 = [-1, 0, 0, 3, 0, 0, 0, 0, 0]
                  ^
num2 = [0, 1, 1, 1, 2, 3]
           ^
--------------------------------


"""
"""
             e
[1,2,3,4,5,6,0]
       ^
[3]
 ^
               e
[1,2,3,3,5,6,4]
       ^
[3]
   ^
             e
[1,2,3,3,5,6,4]
         ^
[3]
   ^

swap => find the last index before n2[i2] > n1[i1]

i1    v
n1 = [1,2,3,0,0,0]
empty       ^

j2    v
n2 = [2,5,6]

i1 = 0
n1[i] < n2[i] (1<= 2)  => i1++

i1 = 1
(2 <= 2) => i1++

i1 = 2
(3 <= 2) NO => swap n1[i1] <-> n2[i2] => i1++

i1 = 3 == empty => set all from n2 to n1 without checking 


n1 = [1,2,3,4, 0,0,0,0]
n2 = [2,2,2,5]


i1 = 0
i2 = 0

1< 2 => i1++

i1 == 1

2 <= 2 => i1++

i1 == 2
3 <= 2 => NO => swap => i1 ++
n1 = [1,2,2,4, 0,0,0,0]
          ^
n2 = [3,2,2,5]
      ^

i1 == 3
4 <= 3 => NO => swap => 

-----------------------

n1 = [1,2,2,3, 0,0,0,0]
            ^
n2 = [4,2,2,5]
      ^
         e
[1,2,3,4,0,0,0,0]
 ^
[2,2,2,5]
 ^
--------------------
         e
[1,2,3,4,0,0,0,0]
     ^
[2,2,2,5]
 ^
           e
[1,2,2,4,3,0,0,0]
       ^
[2,2,2,5]
   ^
--------------------
           e
[1,2,2,4,3,0,0,0]
       ^
[2,2,2,5]
   ^
             e
[1,2,2,2,3,4,0,0]
         ^
[2,2,2,5]
     ^
---------------------
             e
[1,2,2,2,3,4,0,0]
         ^
[2,2,2,5]
     ^
               e
[1,2,2,2,2,4,3,0]
           ^
[2,2,2,5]
       ^
---------------------
               e
[1,2,2,2,2,4,3,0]
           ^
[2,2,2,5]
       ^
--------------------
               e
[1,2,2,2,2,4,3,0]
             ^
[2,2,2,5]
       ^
---------------------
               e
[1,2,2,2,2,4,3,0]
               ^
[2,2,2,5]
       ^

time - O(N)
space - O(1)
"""
